# NOTE: update this with your service name
service: mysite-sa-api-iac

# Create an optimized package for our functions
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables

custom:
  stage: ${opt:stage, self:provider.stage}
  tableName: mysite_sa_${self:custom.stage}

provider:
  name: aws
  runtime: nodejs10.x
  stage: dev
  region: us-east-1
  # To load environment variables externally
  # rename env.example to .env and uncomment
  # the following line. Also, make sure to not
  # commit your .env.
  #
  environment:
    TABLE_NAME: ${self:custom.tableName}
    # TABLE_NAME_APPS: ${self:custom.tableNameApps}
    # TABLE_NAME_CERTS: ${self:custom.tableNameCerts}
  ## 'iamRoleStatements' defines the permission policy for the Lambda function.
  ## In this case Lambda functions are granted with permissions to access DynamoDB.
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      ## Restrict our IAM role permissions to the specific table for the stage
      ## The following resources are the only ones that Lambda functions have access to
      # Resource: "arn:aws:dynamodb:us-east-1:*:*"
      Resource:
        - "Fn::GetAtt": [MysiteTable, Arn] ## stating which table we want to connect to
        - arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.tableName}/index/* ## include access to Indexes (GSIs)
        # "Fn::Join":
        # - ""
        # - - "Fn::GetAtt": [MysiteTable, Arn]
        # - "/index/*"

functions:
  appsGet:
    handler: apps/get.main
    events:
      - http:
          path: apps
          method: get
  appsCreate:
    handler: apps/create.main
    events:
      - http:
          path: apps/create
          method: post
  appsUpdate:
    handler: apps/update.main
    events:
      - http:
          path: apps/update
          method: put
  appsDelete:
    handler: apps/delete.main
    events:
      - http:
          path: apps/delete
          method: delete
  certsGet:
    handler: certs/get.main
    events:
      - http:
          path: certs
          method: get

resources:
  - ${file(resources/api-gateway-errors.yml)}
  - ${file(resources/dynamodb-table.yml)}
  - ${file(resources/cognito-user-pool.yml)}
  - ${file(resources/cognito-identity-pool.yml)}
  # - ${file(resources/s3-bucket.yml)}
